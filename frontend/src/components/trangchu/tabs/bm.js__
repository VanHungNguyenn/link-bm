import React, { Component, Fragment } from 'react';
import { Link } from "react-router-dom";
import { connect } from 'react-redux';
import PropTypes from 'prop-types';
import { getProductByCategoryClient, muaTaikhoan} from '../../../actions/itemActions';
import DataTable from 'react-data-table-component';
import Swal from 'sweetalert2';
class Bm extends Component {
	state = {
		selectedBm: '',
		ten_sp: '',
		mieuta_sp: '',
		price: '',
		sl: 0,
		soluongmua: 0,
		totalprice: 0
	}
	selectedBm(id, price, count_product, ten_category, mieuta){
		var price_final = price * this.state.soluongmua;
		
		this.setState({
			selectedBm: id,
			price: price,
			sl: count_product,
			ten_sp: ten_category,
			mieuta_sp: mieuta,
			totalprice: price_final
		});
	}
	onChange= (e)=>{
		var price = this.state.price*e.target.value;
		// console.log(price);
		this.setState({
			[e.target.name]:e.target.value,
			totalprice: price
		});

	}
	buyNow(){
		var price = this.state.price*this.state.soluongmua;
		var balance = this.props.auth.user.balance;
		var tongtienmua = this.props.auth.user.tongtienmua;
		if (this.state.selectedBm === '') {
  			Swal.fire('Vui lòng chọn loại sản phẩm', '', 'error');
  			return false;
  		}
		if (this.state.sl <= 0) {
  			Swal.fire('Đã hết sản phẩm', '', 'error');
  			return false;
  		}
		if (price > balance) {
			Swal.fire('Tài khoản không đủ để mua', '', 'error');
  			return false;
		}
		if (this.state.sl < this.state.soluongmua) {
			Swal.fire('Bạn đã nhập quá số sản phẩm cho phép', '', 'error');
  			return false;
		}
		if (this.state.soluongmua <= 0) {
			Swal.fire('Bạn đã nhập không hợp lệ', '', 'error');
  			return false;
		}
		Swal.fire({
		  title: 'Bạn có chắc chắn muốn mua?',
		  text: "Số lượng: "+this.state.soluongmua+" - tổng tiền: "+this.formatMoney(price)+"đ",
		  icon: 'warning',
		  showCancelButton: true,
		  confirmButtonColor: '#3085d6',
		  cancelButtonColor: '#d33',
		  confirmButtonText: 'Có'
		}).then((result) => {
		  if (result.value) {
		  		var totalpriceuser = balance - price;
		  		var tienmua = parseInt(tongtienmua) + price;
				this.props.muaTaikhoan(this.state.selectedBm,this.state.soluongmua, totalpriceuser, this.state.ten_sp, this.state.mieuta_sp, this.state.price, tienmua);
		  }
		})
		
	}
	formatMoney(amount, decimalCount = 0, decimal = ".", thousands = ",") {
	  try {
	    decimalCount = Math.abs(decimalCount);
	    decimalCount = isNaN(decimalCount) ? 2 : decimalCount;

	    const negativeSign = amount < 0 ? "-" : "";

	    let i = parseInt(amount = Math.abs(Number(amount) || 0).toFixed(decimalCount)).toString();
	    let j = (i.length > 3) ? i.length % 3 : 0;

	    return negativeSign + (j ? i.substr(0, j) + thousands : '') + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thousands) + (decimalCount ? decimal + Math.abs(amount - i).toFixed(decimalCount).slice(2) : "");
	  } catch (e) {
	    console.log(e)
	  }
	}
	render() {
		var bmlist = this.props.item.items;
		var listproduct = this.props.item.product;
		var that = this;
		const listbm = (
			<Fragment>
				{
					bmlist.map(function(value,index){
						if (value.type == 'BM') {
							var count = 0;
							if (listproduct.length > 0) {
								listproduct.forEach(function(value1,index1){
									if (value1.id_loaisp === value._id) {
										count++;
									}
								})
							}
							var id = 'type-select-'+value._id+'';
							var checked = (<input type="checkbox" className="custom-control-input" id={id} name="bm_type_selected" value="2" />);
							if (value._id === that.state.selectedBm) {
								checked = (<input type="checkbox" className="custom-control-input" id={id} name="bm_type_selected" value="2" checked />);
							}
							return (
								<div className="col-md-4 mb-1" key={index} onClick={()=>{that.selectedBm(value._id, value.price, count, value.name, value.description)}}>
								   <div className="custom-control custom-block custom-control-primary">
								      {checked}
								      <label className="custom-control-label p-2" htmlFor={id}>
								         <span className="d-flex align-items-center">
								            <div className="item item-circle bg-black-5 text-primary-light" style={{"minWidth":"60px"}}>
								               <strong> {count} </strong>
								            </div>
								            <span className="text-truncate ml-2">
								            <span className="font-w700">{value.name}</span>
								            <span className="d-block font-size-sm text-muted">{value.description}</span>
								            <span className="d-block font-size-sm text-muted"><strong className="text-danger">{that.formatMoney(value.price)}đ</strong></span>
								            </span>
								         </span>
								      </label>
								      <span className="custom-block-indicator">
								      <i className="fa fa-check"></i>
								      </span>
								   </div>
								</div>
							)
						} else {
							return ('');
						}
					})
				}
			</Fragment>
		)
		const listvia = (
			<Fragment>
				{
					bmlist.map(function(value,index){
						if (value.type == 'VIA') {
							var count = 0;
							if (listproduct.length > 0) {
								listproduct.forEach(function(value1,index1){
									if (value1.id_loaisp === value._id) {
										count++;
									}
								})
							}
							var id = 'type-select-'+value._id+'';
							var checked = (<input type="checkbox" className="custom-control-input" id={id} name="bm_type_selected" value="2" />);
							if (value._id === that.state.selectedBm) {
								checked = (<input type="checkbox" className="custom-control-input" id={id} name="bm_type_selected" value="2" checked />);
							}
							return (
								<div className="col-md-4 mb-1" key={index} onClick={()=>{that.selectedBm(value._id, value.price, count, value.name, value.description)}}>
								   <div className="custom-control custom-block custom-control-primary">
								      {checked}
								      <label className="custom-control-label p-2" htmlFor={id}>
								         <span className="d-flex align-items-center">
								            <div className="item item-circle bg-black-5 text-primary-light" style={{"minWidth":"60px"}}>
								               <strong> {count} </strong>
								            </div>
								            <span className="text-truncate ml-2">
								            <span className="font-w700">{value.name}</span>
								            <span className="d-block font-size-sm text-muted">{value.description}</span>
								            <span className="d-block font-size-sm text-muted"><strong className="text-danger">{that.formatMoney(value.price)}đ</strong></span>
								            </span>
								         </span>
								      </label>
								      <span className="custom-block-indicator">
								      <i className="fa fa-check"></i>
								      </span>
								   </div>
								</div>
							)
						} else {
							return ('');
						}
					})
				}
			</Fragment>
		)
		return (
			<Fragment>
				<div className="content" style={{"paddingTop":"0px"}}>
                    <div className="block block-rounded block-bordered">
						<div className="block-header block-header-default">
							<h3 className="block-title">Danh sách <span className="text-muted font-size-sm">BM</span></h3>
						</div>
						<div className="block-content block-content-full border-bottom">
							<div className="row">
								{listbm}
							</div>
						</div>
					</div>
				</div>
				<div className="content" style={{"paddingTop":"0px"}}>
					<div className="block block-rounded block-bordered">
						<div className="block-header block-header-default">
							<h3 className="block-title">Danh sách <span className="text-muted font-size-sm">VIA</span></h3>
						</div>
						<div className="block-content block-content-full border-bottom">
							<div className="row">
								{listvia}
							</div>
						</div>
					</div>
				</div>
				
				{
					this.props.auth.user != null ?
						<div className="content" style={{"paddingTop":"0px"}}>
							<div className="block block-rounded block-bordered">
								<div className="block-content block-content-full border-bottom">
									<div className="form-group">
										<label htmlFor="example-text-input">Nhập số lượng muốn mua</label>
										<input type="number" className="form-control" id="soluongmua" name="soluongmua" value={this.state.soluongmua} placeholder="Số lượng" onChange={this.onChange}/>
									</div>
									<div className="form-group">
										<div className="alert alert-warning alert-dismissable" role="alert" style={{"textAlign":"center"}}>
											<h3 className="alert-heading font-size-h4 my-2">Tổng tiền</h3>
											<p className="mb-0">{this.formatMoney(this.state.totalprice)} VNĐ</p>
										</div>
									</div>
									<div className="form-group"  style={{"textAlign":"center"}}>
										<button className="btn btn-primary" onClick={()=>{this.buyNow()}}  style={{"width":"45%"}}>Mua</button>
									</div>
								</div>
							</div>
						</div>
					: ''
				}
				<div className="content" style={{"paddingTop":"0px"}}>
					<div className="block block-rounded block-bordered">
						<div className="block-header block-header-default">
							<h3 className="block-title">Chính sách của hệ thống!</h3>
						</div>
						<div className="block-content block-content-full border-bottom">
							<div className="alert alert-primary alert-dismissable">
								<ul>
									<li>Khi mua via hệ thống đã check live acc rồi xuất cho bạn (nick có 2fa) nên bạn nào hiểu rõ hãy dùng tránh khiếu nại hệ thống</li>
								</ul>
							</div>
						</div>
					</div>
                </div>
			</Fragment>
		)
	}
}

const mapStateToProps = state => ({
	auth: state.auth,
	item: state.item
});

export default connect(mapStateToProps, {getProductByCategoryClient, muaTaikhoan})(Bm);